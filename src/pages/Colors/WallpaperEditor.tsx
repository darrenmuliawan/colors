/* eslint-disable jsx-a11y/no-static-element-interactions */
import { useColorsState } from 'hooks';
import { useEffect, useRef, useState } from 'react';
import { classNames, generateTextColor } from 'utils';
import { ReactComponent as CloseIcon } from 'assets/svg/close.svg';
import html2canvas from 'html2canvas';
import { BASE_COLOR } from 'constants';

export const WallpaperEditor = () => {
  const { selectedColor, wallpaperVisible, closeWallpaper } = useColorsState();
  const [hidden, setHidden] = useState(true);
  const wallpaperRef = useRef<HTMLDivElement>(null);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    const escListener = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        closeWallpaper();
      }
    };
    window.addEventListener('keydown', escListener);

    return () => {
      window.removeEventListener('keydown', escListener);
    };
  }, []);

  useEffect(() => {
    if (wallpaperVisible) {
      setHidden(false);
    }
  }, [wallpaperVisible]);

  const handleCloseWallpaper = () => {
    closeWallpaper();
    setTimeout(() => {
      setHidden(true);
    }, 500);
  };

  const downloadImage = async (node: HTMLDivElement | null, filename: string) => {
    setLoading(true);
    if (node) {
      const canvas = await html2canvas(node);

      const link = document.createElement('a');
      link.download = `${filename}.jpg`;
      link.href = canvas.toDataURL('image/jpeg');
      link.click();
    }
    setLoading(false);
  };

  return (
    <div
      className={classNames(
        'fixed flex top-0 left-0 z-[0] transition-all duration-300 h-full w-full',
        wallpaperVisible ? 'slide-top z-[1000]' : 'slide-bottom',
        hidden ? 'hidden' : ''
      )}
      id="wallpaper-editor"
    >
      <div className="relative h-full w-full z-[2000]">
        <CloseIcon
          className="absolute top-10 right-10 cursor-pointer opacity-30 hover:opacity-100"
          height={32}
          onClick={() => handleCloseWallpaper()}
        />
        <div
          className={classNames(
            'absolute left-1/2 -translate-x-1/2 p-4 bg-neutral flex items-center rounded-lg top-10 duration-300 transition-all cursor-pointer opacity-30 hover:opacity-100 text-2xl px-8',
            loading ? 'cursor-wait' : ''
          )}
          onClick={() => downloadImage(wallpaperRef.current, `custom-${selectedColor}`)}
        >
          Download
          {/* <div className="rounded-lg cursor-pointer opacity-30 hover:opacity-100 bg-neutral-200">
            <DownloadIcon height={32} />
          </div> */}
        </div>
      </div>
      <div
        className={classNames('absolute duration-500 transition h-full w-full wallpaper')}
        style={{ backgroundColor: selectedColor }}
        ref={wallpaperRef}
      >
        <div
          className="absolute top-[5%] left-[5%] font-[helvetica] font-semibold"
          style={{ color: generateTextColor(selectedColor) }}
        >
          <div className="">
            <p className="text-5xl mb-4">&quot;{BASE_COLOR[selectedColor].name}&quot;</p>
            <p className="text-5xl mb-4 uppercase">SHADES OF {BASE_COLOR[selectedColor].shade}</p>
            {/* <p className="text-5xl mb-4">
              Generated by <span className="text-primary">chromax.io</span>
            </p> */}
          </div>
        </div>
        <div
          className="absolute bottom-[5%] right-[5%] font-[helvetica] font-semibold w-full"
          style={{ color: generateTextColor(selectedColor) }}
        >
          <div className="grid grid-cols-2 text-right">
            <p className="text-4xl mb-4">Article: </p>
            <p className="text-4xl mb-4 uppercase">{BASE_COLOR[selectedColor].article}</p>
            <p className="text-4xl mb-4">HEX:</p>
            <p className="text-4xl mb-4 uppercase">{selectedColor}</p>
            <p className="text-4xl mb-4">Spotted in:</p>
            <p className="text-4xl mb-4 uppercase">{BASE_COLOR[selectedColor].location}</p>
            <p className="text-4xl mb-4">Type:</p>
            <p className="text-4xl mb-4 first-letter:uppercase uppercase">
              {BASE_COLOR[selectedColor].type}
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};
